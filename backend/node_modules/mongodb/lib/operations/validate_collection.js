"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateCollectionOperation = void 0;
<<<<<<< HEAD
=======
const responses_1 = require("../cmap/wire_protocol/responses");
>>>>>>> 1b03d93 (commit in korea)
const error_1 = require("../error");
const command_1 = require("./command");
/** @internal */
class ValidateCollectionOperation extends command_1.CommandOperation {
    constructor(admin, collectionName, options) {
<<<<<<< HEAD
        // Decorate command with extra options
        const command = { validate: collectionName };
        const keys = Object.keys(options);
        for (let i = 0; i < keys.length; i++) {
            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {
                command[keys[i]] = options[keys[i]];
            }
        }
        super(admin.s.db, options);
        this.options = options;
        this.command = command;
=======
        super(admin.s.db, options);
        this.SERVER_COMMAND_RESPONSE_TYPE = responses_1.MongoDBResponse;
        this.options = options;
>>>>>>> 1b03d93 (commit in korea)
        this.collectionName = collectionName;
    }
    get commandName() {
        return 'validate';
    }
<<<<<<< HEAD
    async execute(server, session, timeoutContext) {
        const collectionName = this.collectionName;
        const doc = await super.executeCommand(server, session, this.command, timeoutContext);
        if (doc.result != null && typeof doc.result !== 'string')
            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');
        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)
            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);
        if (doc.valid != null && !doc.valid)
            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);
        return doc;
=======
    buildCommandDocument(_connection, _session) {
        // Decorate command with extra options
        return {
            validate: this.collectionName,
            ...Object.fromEntries(Object.entries(this.options).filter(entry => entry[0] !== 'session'))
        };
    }
    handleOk(response) {
        const result = super.handleOk(response);
        if (result.result != null && typeof result.result !== 'string')
            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');
        if (result.result != null && result.result.match(/exception|corrupt/) != null)
            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${this.collectionName}`);
        if (result.valid != null && !result.valid)
            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${this.collectionName}`);
        return response;
>>>>>>> 1b03d93 (commit in korea)
    }
}
exports.ValidateCollectionOperation = ValidateCollectionOperation;
//# sourceMappingURL=validate_collection.js.map